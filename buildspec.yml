version: 0.2

env:
  variables:
    REPOSITORY_NAME: "cicdpipeline"  # Make sure this matches your ECR repo
    AWS_DEFAULT_REGION: "us-east-1"
    CONTAINER_NAME: "MyContainer"
    CONTAINER_PORT: "3000"
    TASK_FAMILY: "InfraStackMyTaskDef93E1369E"
    EXECUTION_ROLE_ARN: "arn:aws:iam::535002855046:role/InfraStack-MyTaskDefExecutionRole7C814C05-KZYilu3n8JhM"
    TASK_ROLE_ARN: "arn:aws:iam::535002855046:role/InfraStack-MyTaskDefTaskRole727F9D3B-iQmuvZC0GByO"
    LOG_GROUP: "InfraStack-MyTaskDefMyContainerLogGroup2DC45837-pJGXpND206ay"

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing dependencies..."
      - apt-get update -y
      - python --version
      - pip install --upgrade pip awscli

  pre_build:
    commands:
      - echo "Setting up ECR repository URI..."
      - REPOSITORY_URI="535002855046.dkr.ecr.us-east-1.amazonaws.com/$REPOSITORY_NAME"
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo "ECR URI: $REPOSITORY_URI"
      - echo "Image tag: $IMAGE_TAG"
      - aws ecr get-login-password | docker login --username AWS --password-stdin $REPOSITORY_URI

  build:
    commands:
      - echo "Building Docker image..."
      - docker build --build-arg ENV=prod -t $REPOSITORY_URI:$IMAGE_TAG .
      - docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest

  post_build:
    commands:
      - echo "Pushing images to ECR..."
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest

      - echo "Creating imagedefinitions.json..."
      - echo "[{\"name\":\"$CONTAINER_NAME\",\"imageUri\":\"$REPOSITORY_URI:$IMAGE_TAG\"}]" > imagedefinitions.json

      - echo "Creating appspec.yaml..."
      - echo "version: 1" > appspec.yaml
      - echo "Resources:" >> appspec.yaml
      - echo "  - TargetService:" >> appspec.yaml
      - echo "      Type: AWS::ECS::Service" >> appspec.yaml
      - echo "      Properties:" >> appspec.yaml
      - echo "        LoadBalancerInfo:" >> appspec.yaml
      - echo "          ContainerName: \"$CONTAINER_NAME\"" >> appspec.yaml
      - echo "          ContainerPort: $CONTAINER_PORT" >> appspec.yaml

      - echo "Creating task-definition.json..."
      - |
        echo '{
          "family": "'"$TASK_FAMILY"'",
          "networkMode": "awsvpc",
          "containerDefinitions": [
            {
              "name": "'"$CONTAINER_NAME"'",
              "image": "'"$REPOSITORY_URI:$IMAGE_TAG"'",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": '"$CONTAINER_PORT"',
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "'"$LOG_GROUP"'",
                  "awslogs-region": "'"$AWS_DEFAULT_REGION"'",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ],
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "'"$EXECUTION_ROLE_ARN"'",
          "taskRoleArn": "'"$TASK_ROLE_ARN"'"
        }' > task-definition.json

      - echo "Generated files:"
      - ls -la
      - echo "Task definition content:"
      - cat task-definition.json
      - echo "AppSpec content:"
      - cat appspec.yaml

artifacts:
  files:
    - appspec.yaml
    - imagedefinitions.json
    - task-definition.json
  name: Artifact_Build_BuildDockerImage
  discard-paths: yes
