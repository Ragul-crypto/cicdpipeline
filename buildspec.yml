version: 0.2
env:
  variables:
    REPOSITORY_NAME: "test"
phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing dependencies..."
      - apt-get update -y
      - python --version
      - pip install --upgrade pip
      - pip install awscli --upgrade

  pre_build:
    commands:
      - echo "Logging in to ECR..."
      - REPOSITORY_URI=535002855046.dkr.ecr.us-east-1.amazonaws.com/cicdpipeline
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REPOSITORY_URI

  build:
    commands:
      - echo "Building Docker image..."
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG

  post_build:
    commands:
      - echo "Pushing images to ECR..."
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG

      # Get the latest task definition ARN
      - TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition cicdpipeline-taskdef --query 'taskDefinition.taskDefinitionArn' --output text)
      - echo "Latest Task Definition ARN: $TASK_DEFINITION_ARN"

      # Generate appspec.yaml with dynamic ARN
      - |
        cat <<EOF > appspec.yaml
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: "$TASK_DEFINITION_ARN"
                LoadBalancerInfo:
                  ContainerName: "MyContainer"
                  ContainerPort: 80
        EOF

      # Generate task definition template
      - |
        cat <<EOF > TaskDefinitionTemplatePath.json
        {
          "family": "cicdpipeline-taskdef",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::535002855046:role/ecspipeline",
          "containerDefinitions": [
            {
              "name": "MyContainer",
              "image": "$REPOSITORY_URI:$IMAGE_TAG",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 80,
                  "protocol": "tcp"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/cicdpipeline",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF

      # Generate imagedefinitions.json for CodePipeline
      - echo "[{\"name\":\"MyContainer\",\"imageUri\":\"$REPOSITORY_URI:$IMAGE_TAG\"}]" > imagedefinitions.json

      # Verify files
      - echo "Generated deployment files:"
      - ls -alh
      - echo "appspec.yaml content:"
      - cat appspec.yaml
      - echo "TaskDefinitionTemplatePath.json content:"
      - cat TaskDefinitionTemplatePath.json

artifacts:
  files:
    - appspec.yaml
    - imagedefinitions.json
    - TaskDefinitionTemplatePath.json
  name: deployment-artifacts
